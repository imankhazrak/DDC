{"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"Yh0MS6hOhh9h","executionInfo":{"status":"ok","timestamp":1698166181034,"user_tz":240,"elapsed":23936,"user":{"displayName":"Iman Khazrak","userId":"00007021905658904546"}},"outputId":"0b07608f-2dcc-4222-b488-acad6cb9f213","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["from torchvision import datasets, transforms\n","import torch\n","import os\n","\n","\n","def load_data(root_path, dir, batch_size, phase):\n","    transform_dict = {\n","        'src': transforms.Compose(\n","        [transforms.RandomResizedCrop(224),\n","         transforms.RandomHorizontalFlip(),\n","         transforms.ToTensor(),\n","         transforms.Normalize(mean=[0.485, 0.456, 0.406],\n","                              std=[0.229, 0.224, 0.225]),\n","         ]),\n","        'tar': transforms.Compose(\n","        [transforms.Resize(224),\n","         transforms.ToTensor(),\n","         transforms.Normalize(mean=[0.485, 0.456, 0.406],\n","                              std=[0.229, 0.224, 0.225]),\n","         ])}\n","    data = datasets.ImageFolder(root=os.path.join(root_path, dir), transform=transform_dict[phase])\n","    data_loader = torch.utils.data.DataLoader(data, batch_size=batch_size, shuffle=True, drop_last=False, num_workers=4)\n","    return data_loader\n","\n","def load_train(root_path, dir, batch_size, phase):\n","    transform_dict = {\n","        'src': transforms.Compose(\n","            [transforms.RandomResizedCrop(224),\n","             transforms.RandomHorizontalFlip(),\n","             transforms.ToTensor(),\n","             transforms.Normalize(mean=[0.485, 0.456, 0.406],\n","                                  std=[0.229, 0.224, 0.225]),\n","             ]),\n","        'tar': transforms.Compose(\n","            [transforms.Resize(224),\n","             transforms.ToTensor(),\n","             transforms.Normalize(mean=[0.485, 0.456, 0.406],\n","                                  std=[0.229, 0.224, 0.225]),\n","             ])}\n","    data = datasets.ImageFolder(root=os.path.join(root_path, dir), transform=transform_dict[phase])\n","    train_size = int(0.8 * len(data))\n","    test_size = len(data) - train_size\n","    data_train, data_val = torch.utils.data.random_split(data, [train_size, test_size])\n","    train_loader = torch.utils.data.DataLoader(data_train, batch_size=batch_size, shuffle=True, drop_last=False, num_workers=4)\n","    val_loader = torch.utils.data.DataLoader(data_val, batch_size=batch_size, shuffle=True, drop_last=False, num_workers=4)\n","    return train_loader, val_loader\n"],"metadata":{"id":"inF8_FIkhbBD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","src = list(files.upload().values())[0]\n","open('data_loader.py','wb').write(src)\n","import data_loader"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"zjgxCaJulMXU","executionInfo":{"status":"ok","timestamp":1698166223796,"user_tz":240,"elapsed":33866,"user":{"displayName":"Iman Khazrak","userId":"00007021905658904546"}},"outputId":"601abd9f-058d-4f0b-d237-7daf88a58874"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-b1646ecf-64e7-450e-9f45-e3108b70091f\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-b1646ecf-64e7-450e-9f45-e3108b70091f\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving data_loader.py to data_loader.py\n"]}]},{"cell_type":"code","source":["from __future__ import print_function\n","\n","import argparse\n","\n","import data_loader\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torchvision\n","import time\n","\n","\n","# Command setting\n","parser = argparse.ArgumentParser(description='Finetune')\n","parser.add_argument('-f')\n","parser.add_argument('--model', type=str, default='resnet')\n","parser.add_argument('--batchsize', type=int, default=64)\n","parser.add_argument('--src', type=str, default='amazon')\n","parser.add_argument('--tar', type=str, default='webcam')\n","parser.add_argument('--n_class', type=int, default=31)\n","parser.add_argument('--lr', type=float, default=1e-4)\n","parser.add_argument('--n_epoch', type=int, default=100)\n","parser.add_argument('--momentum', type=float, default=0.9)\n","parser.add_argument('--decay', type=float, default=5e-4)\n","parser.add_argument('--data', type=str, default='/content/drive/MyDrive/4. BGSU/1.2 PhD_Courses/Z. RA & Desertation/Codes/Dr_Niu/MMD/Office31')\n","parser.add_argument('--early_stop', type=int, default=20)\n","args = parser.parse_args()\n","\n","# Parameter setting\n","DEVICE = torch.device('cuda')\n","BATCH_SIZE = {'src': int(args.batchsize), 'tar': int(args.batchsize)}\n","\n","\n","def load_model(name='alexnet'):\n","    if name == 'alexnet':\n","        model = torchvision.models.alexnet(pretrained=True)\n","        n_features = model.classifier[6].in_features\n","        fc = torch.nn.Linear(n_features, args.n_class)\n","        model.classifier[6] = fc\n","    elif name == 'resnet':\n","        model = torchvision.models.resnet50(pretrained=True)\n","        n_features = model.fc.in_features\n","        fc = torch.nn.Linear(n_features, args.n_class)\n","        model.fc = fc\n","    model.fc.weight.data.normal_(0, 0.005)\n","    model.fc.bias.data.fill_(0.1)\n","    return model\n","\n","\n","def get_optimizer(model_name):\n","    learning_rate = args.lr\n","    if model_name == 'alexnet':\n","        param_group = [\n","            {'params': model.features.parameters(), 'lr': learning_rate}]\n","        for i in range(6):\n","            param_group += [{'params': model.classifier[i].parameters(),\n","                             'lr': learning_rate}]\n","        param_group += [{'params': model.classifier[6].parameters(),\n","                         'lr': learning_rate * 10}]\n","    elif model_name == 'resnet':\n","        param_group = []\n","        for k, v in model.named_parameters():\n","            if not k.__contains__('fc'):\n","                param_group += [{'params': v, 'lr': learning_rate}]\n","            else:\n","                param_group += [{'params': v, 'lr': learning_rate * 10}]\n","    optimizer = optim.SGD(param_group, momentum=args.momentum)\n","    return optimizer\n","\n","\n","# Schedule learning rate\n","def lr_schedule(optimizer, epoch):\n","    def lr_decay(LR, n_epoch, e):\n","        return LR / (1 + 10 * e / n_epoch) ** 0.75\n","\n","    for i in range(len(optimizer.param_groups)):\n","        if i < len(optimizer.param_groups) - 1:\n","            optimizer.param_groups[i]['lr'] = lr_decay(\n","                args.lr, args.n_epoch, epoch)\n","        else:\n","            optimizer.param_groups[i]['lr'] = lr_decay(\n","                args.lr, args.n_epoch, epoch) * 10\n","\n","def test(model, target_test_loader):\n","    model.eval()\n","    correct = 0\n","    criterion = torch.nn.CrossEntropyLoss()\n","    len_target_dataset = len(target_test_loader.dataset)\n","    with torch.no_grad():\n","        for data, target in target_test_loader:\n","            data, target = data.to(DEVICE), target.to(DEVICE)\n","            s_output = model(data)\n","            loss = criterion(s_output, target)\n","            pred = torch.max(s_output, 1)[1]\n","            correct += torch.sum(pred == target)\n","    acc = correct.double() / len(target_test_loader.dataset)\n","    return acc\n","\n","def finetune(model, dataloaders, optimizer):\n","    since = time.time()\n","    best_acc = 0\n","    criterion = nn.CrossEntropyLoss()\n","    stop = 0\n","    for epoch in range(1, args.n_epoch + 1):\n","        stop += 1\n","        # You can uncomment this line for scheduling learning rate\n","        # lr_schedule(optimizer, epoch)\n","        for phase in ['src', 'val', 'tar']:\n","            if phase == 'src':\n","                model.train()\n","            else:\n","                model.eval()\n","            total_loss, correct = 0, 0\n","            for inputs, labels in dataloaders[phase]:\n","                inputs, labels = inputs.to(DEVICE), labels.to(DEVICE)\n","                optimizer.zero_grad()\n","                with torch.set_grad_enabled(phase == 'src'):\n","                    outputs = model(inputs)\n","                    loss = criterion(outputs, labels)\n","                preds = torch.max(outputs, 1)[1]\n","                if phase == 'src':\n","                    loss.backward()\n","                    optimizer.step()\n","                total_loss += loss.item() * inputs.size(0)\n","                correct += torch.sum(preds == labels.data)\n","            epoch_loss = total_loss / len(dataloaders[phase].dataset)\n","            epoch_acc = correct.double() / len(dataloaders[phase].dataset)\n","            print('Epoch: [{:02d}/{:02d}]---{}, loss: {:.6f}, acc: {:.4f}'.format(epoch, args.n_epoch, phase, epoch_loss,\n","                                                                                  epoch_acc))\n","            if phase == 'val' and epoch_acc > best_acc:\n","                stop = 0\n","                best_acc = epoch_acc\n","                torch.save(model.state_dict(), 'model.pkl')\n","        if stop >= args.early_stop:\n","            break\n","        print()\n","    model.load_state_dict(torch.load('model.pkl'))\n","    acc_test = test(model, dataloaders['tar'])\n","    time_pass = time.time() - since\n","    print('Training complete in {:.0f}m {:.0f}s'.format(time_pass // 60, time_pass % 60))\n","    return model, acc_test\n","\n","\n","if __name__ == '__main__':\n","    torch.manual_seed(10)\n","    # Load data\n","    root_dir = args.data\n","    domain = {'src': str(args.src), 'tar': str(args.tar)}\n","    dataloaders = {}\n","    dataloaders['tar'] = data_loader.load_data(root_dir, domain['tar'], BATCH_SIZE['tar'], 'tar')\n","    dataloaders['src'], dataloaders['val'] = data_loader.load_train(root_dir, domain['src'], BATCH_SIZE['src'], 'src')\n","    # Load model\n","    model_name = str(args.model)\n","    model = load_model(model_name).to(DEVICE)\n","    print('Source: {} ({}), target: {} ({}), model: {}'.format(\n","        domain['src'], len(dataloaders['src'].dataset), domain['tar'], len(dataloaders['val'].dataset), model_name))\n","    optimizer = get_optimizer(model_name)\n","    model_best, best_acc = finetune(model, dataloaders, optimizer)\n","    print('Best acc: {}'.format(best_acc))"],"metadata":{"id":"qaDmPMWgh6zG","executionInfo":{"status":"ok","timestamp":1698167234567,"user_tz":240,"elapsed":1009214,"user":{"displayName":"Iman Khazrak","userId":"00007021905658904546"}},"outputId":"b5d275ca-ea6c-427c-953e-2595bb883acc","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py:557: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(_create_warning_msg(\n","/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\n","100%|██████████| 97.8M/97.8M [00:00<00:00, 147MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["Source: amazon (2253), target: webcam (564), model: resnet\n","Epoch: [01/100]---src, loss: 0.326713, acc: 0.9636\n","Epoch: [01/100]---val, loss: 0.000013, acc: 1.0000\n","Epoch: [01/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [02/100]---src, loss: 0.000009, acc: 1.0000\n","Epoch: [02/100]---val, loss: 0.000014, acc: 1.0000\n","Epoch: [02/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [03/100]---src, loss: 0.000014, acc: 1.0000\n","Epoch: [03/100]---val, loss: 0.000009, acc: 1.0000\n","Epoch: [03/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [04/100]---src, loss: 0.000011, acc: 1.0000\n","Epoch: [04/100]---val, loss: 0.000022, acc: 1.0000\n","Epoch: [04/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [05/100]---src, loss: 0.000013, acc: 1.0000\n","Epoch: [05/100]---val, loss: 0.000005, acc: 1.0000\n","Epoch: [05/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [06/100]---src, loss: 0.000016, acc: 1.0000\n","Epoch: [06/100]---val, loss: 0.000005, acc: 1.0000\n","Epoch: [06/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [07/100]---src, loss: 0.000012, acc: 1.0000\n","Epoch: [07/100]---val, loss: 0.000010, acc: 1.0000\n","Epoch: [07/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [08/100]---src, loss: 0.000015, acc: 1.0000\n","Epoch: [08/100]---val, loss: 0.000008, acc: 1.0000\n","Epoch: [08/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [09/100]---src, loss: 0.000020, acc: 1.0000\n","Epoch: [09/100]---val, loss: 0.000007, acc: 1.0000\n","Epoch: [09/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [10/100]---src, loss: 0.000011, acc: 1.0000\n","Epoch: [10/100]---val, loss: 0.000023, acc: 1.0000\n","Epoch: [10/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [11/100]---src, loss: 0.000023, acc: 1.0000\n","Epoch: [11/100]---val, loss: 0.000009, acc: 1.0000\n","Epoch: [11/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [12/100]---src, loss: 0.000009, acc: 1.0000\n","Epoch: [12/100]---val, loss: 0.000003, acc: 1.0000\n","Epoch: [12/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [13/100]---src, loss: 0.000029, acc: 1.0000\n","Epoch: [13/100]---val, loss: 0.000006, acc: 1.0000\n","Epoch: [13/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [14/100]---src, loss: 0.000036, acc: 1.0000\n","Epoch: [14/100]---val, loss: 0.000004, acc: 1.0000\n","Epoch: [14/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [15/100]---src, loss: 0.000009, acc: 1.0000\n","Epoch: [15/100]---val, loss: 0.000010, acc: 1.0000\n","Epoch: [15/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [16/100]---src, loss: 0.000008, acc: 1.0000\n","Epoch: [16/100]---val, loss: 0.000009, acc: 1.0000\n","Epoch: [16/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [17/100]---src, loss: 0.000013, acc: 1.0000\n","Epoch: [17/100]---val, loss: 0.000004, acc: 1.0000\n","Epoch: [17/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [18/100]---src, loss: 0.000023, acc: 1.0000\n","Epoch: [18/100]---val, loss: 0.000019, acc: 1.0000\n","Epoch: [18/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [19/100]---src, loss: 0.000016, acc: 1.0000\n","Epoch: [19/100]---val, loss: 0.000007, acc: 1.0000\n","Epoch: [19/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [20/100]---src, loss: 0.000018, acc: 1.0000\n","Epoch: [20/100]---val, loss: 0.000003, acc: 1.0000\n","Epoch: [20/100]---tar, loss: 0.000000, acc: 1.0000\n","\n","Epoch: [21/100]---src, loss: 0.000022, acc: 1.0000\n","Epoch: [21/100]---val, loss: 0.000008, acc: 1.0000\n","Epoch: [21/100]---tar, loss: 0.000000, acc: 1.0000\n","Training complete in 16m 32s\n","Best acc: 1.0\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"/v2/external/notebooks/empty.ipynb","timestamp":1698165707972}],"gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}